---
- name: Sync Excel Inventory to a Static AWX Inventory
  hosts: localhost
  connection: local
  gather_facts: false

  # --- CONFIGURATION: UPDATE THESE VARIABLES ---
  vars:
    awx_host: "http://192.168.1.47:81"
    awx_token: "0g7S62u6jIQ5mxMUeZhI84wRIXBGEJ"
    awx_inventory_name: "static_inv" # The name of the AWX inventory you want to update
    inventory_script_path: "./excel_inventory.py" # Path to your dynamic inventory script

  tasks:
    - name: Check if a key collection (awx.awx) is already installed
      ansible.builtin.stat:
        path: "~/.ansible/collections/ansible_collections/awx/awx"
      register: awx_collection_check

    - name: Install required Ansible collections if missing
      ansible.builtin.command:
        cmd: "ansible-galaxy collection install awx.awx ansible.netcommon community.general"
      when: not awx_collection_check.stat.exists
      changed_when: true # This ensures the task reports a change when it runs
    - name: Ensure Python dependencies (pandas, openpyxl) are installed
      ansible.builtin.pip:
        name:
          - pandas
          - openpyxl
          - xlrd
          - awxkit
        state: present

    - name: Show the project directory structure
      command: ls -laR
      register: file_listing

    - name: Display the file list
      debug:
        var: file_listing.stdout_lines
        
    - name: Run the dynamic inventory script to get the data
      command: "python {{ inventory_script_path }} --list"
      register: script_output
      changed_when: false

    - name: Parse the JSON output from the script
      set_fact:
        inventory_data: "{{ script_output.stdout | from_json }}"

    # --- STEP 1: Create all Groups ---
    - name: Create or update all groups using awx-cli
      ansible.builtin.command:
        cmd: "awx group create --name '{{ item.key }}' --inventory '{{ awx_inventory_name }}' --wait"
      loop: "{{ inventory_data | dict2items | selectattr('key', '!=', '_meta') | list }}"
      register: group_create_result
      failed_when: "group_create_result.rc != 0 and 'already exists' not in group_create_result.stderr"
      changed_when: "group_create_result.rc == 0"
      environment:
        TOWER_HOST: "{{ awx_host }}"
        TOWER_OAUTH_TOKEN: "{{ awx_token }}"
        TOWER_VERIFY_SSL: "false"

    # --- THIS TASK IS NOW IDEMPOTENT ---
    - name: Create or update all hosts using awx-cli
      ansible.builtin.command:
        cmd: "awx host create --name '{{ item.key }}' --inventory '{{ awx_inventory_name }}' --variables '{{ item.value | to_json }}' --wait"
      loop: "{{ inventory_data._meta.hostvars | dict2items }}"
      loop_control:
        label: "{{ item.key }}"
      register: host_create_result
      failed_when: "host_create_result.rc != 0 and 'already exists' not in host_create_result.stderr"
      changed_when: "host_create_result.rc == 0"
      environment:
        TOWER_HOST: "{{ awx_host }}"
        TOWER_OAUTH_TOKEN: "{{ awx_token }}"
        TOWER_VERIFY_SSL: "false"
        
    # --- STEP 3: Associate Hosts with their Groups ---
    - name: Associate hosts with their correct groups
      ansible.builtin.command:
        cmd: "awx groups associate --host '{{ item.1 }}' --group '{{ item.0.key }}'"
      loop: "{{ (inventory_data | dict2items | selectattr('key', '!=', '_meta') | list) | subelements('value.hosts') }}"
      loop_control:
        label: "Associating host '{{ item.1 }}' with group '{{ item.0.key }}'"
      environment:
        TOWER_HOST: "{{ awx_host }}"
        TOWER_OAUTH_TOKEN: "{{ awx_token }}"
        TOWER_VERIFY_SSL: "false"
